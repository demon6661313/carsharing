openapi: 3.0.3
info:
  title: carsharing
  description: |-
    Test for Foundarium
  termsOfService: http://swagger.io/terms/
  contact:
    email: kupchik.anarchy@gmail.com
  version: '0.1'
servers:
  - url: https://127.0.0.1/api
tags:
  - name: users
    description: users crud api
  - name: cars
    description: cars crud and change user
paths:
  /users/{userId}:
    get:
      tags:
        - users
      summary: get user
      description: get user by id
      operationId: showUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
              example:
                id: 1
                name: demon
                email: demon@email.com
    put:
      tags:
        - users
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/User'
            example:
              name: demon
              email: demon@email.com  
        required: true
      responses:
        '200':
          description: Successful operation
        '404':
          description: not found
        '422':
          description: Validation error
    delete:
      tags:
        - users
      summary: Deletes a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: user id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success
        '404':
          description: user not found
  /users:
    get:
      tags:
        - users
      summary: get users list
      description: users list
      operationId: allUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              example:
                - id: 1
                  name: demon
                  email: demon@email.com
    post:
      tags:
        - users
      summary: Add a new user
      description: Add a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/User'
            example:
              name: demon
              email: demon@email.com
              password: qweqweqwe
              password_confirmation: qweqweqwe
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: 1 
        '422':
          description: Invalid input
          
          
  /cars/{carId}:
    get:
      tags:
        - cars
      summary: get car
      description: get car by id
      operationId: showCar
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Car'
              example:
                id: 1
                brand: Dodge
                model: Charger
                vin: qweqweqwe
                user_id: 1
                user_email: demon@email.com
        '404':
          description: not found
    put:
      tags:
        - cars
      summary: Update an existing car
      description: Update an existing car by Id
      operationId: updateCar
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent car
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/Car'
            example:
              brand: Dodge
              model: Charger
              vin: qweqweqwe
              user_id: 1  
        required: true
      responses:
        '200':
          description: Successful operation
        '404':
          description: not found
        '422':
          description: Validation error
    delete:
      tags:
        - cars
      summary: Deletes a car
      description: delete a car
      operationId: deleteCar
      parameters:
        - name: carId
          in: path
          description: car id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success
        '404':
          description: car not found
  /cars:
    get:
      tags:
        - cars
      summary: get cars list
      description: cars list
      operationId: allcars
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              example:
                - id: 1
                  brand: Dodge
                  model: Charger
                  vin: qweqweqwe
                  user_id: 1
                  user_email: demon@email.com
    post:
      tags:
        - cars
      summary: Add a new car
      description: Add a new car
      operationId: createCar
      requestBody:
        description: Create a new car
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/Car'
            example:
              brand: Dodge
              model: Charger
              vin: qweqweqwe
              user_id: 1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                id: 1 
        '422':
          description: Invalid input
components:
  schemas:
    User:
      required:
        - name
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Demon
        email:
          type: string
          example: demon@email.com
        password:
          type: string
          example: 'qweqweqwe'
    Car:
      required:
        - brand
        - model
        - vin
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        brand:
          type: string
          example: Dodge
        model:
          type: string
          example: Charger
        vin:
          type: string
          example: 'qweqweqwe'
        user_id:
          type: integer
          format: int64
          example: 1